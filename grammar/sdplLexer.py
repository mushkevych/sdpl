# Generated from sdpl.g4 by ANTLR 4.5.1
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\64")
        buf.write("\u014b\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3")
        buf.write("\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35")
        buf.write("\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3")
        buf.write("%\3%\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\3)\3*\3*\3*\3+\3")
        buf.write("+\3,\3,\3,\3,\3-\3-\3-\3.\3.\3.\3.\3/\3/\3/\3/\7/\u011b")
        buf.write("\n/\f/\16/\u011e\13/\3\60\6\60\u0121\n\60\r\60\16\60\u0122")
        buf.write("\3\60\3\60\6\60\u0127\n\60\r\60\16\60\u0128\3\61\6\61")
        buf.write("\u012c\n\61\r\61\16\61\u012d\3\62\6\62\u0131\n\62\r\62")
        buf.write("\16\62\u0132\3\62\3\62\3\63\3\63\3\63\5\63\u013a\n\63")
        buf.write("\3\63\7\63\u013d\n\63\f\63\16\63\u0140\13\63\3\63\3\63")
        buf.write("\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\u013e\2\67")
        buf.write("\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O")
        buf.write(")Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\2i\2k\2\3\2\5\5\2\13")
        buf.write("\f\17\17\"\"\3\2\62;\4\2C\\c|\u0150\2\3\3\2\2\2\2\5\3")
        buf.write("\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2")
        buf.write("\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2")
        buf.write("\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2")
        buf.write("\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2")
        buf.write("\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3")
        buf.write("\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2")
        buf.write("\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2")
        buf.write("\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3")
        buf.write("\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W")
        buf.write("\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2")
        buf.write("a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\3m\3\2\2\2\5v\3\2\2\2")
        buf.write("\7y\3\2\2\2\t{\3\2\2\2\13}\3\2\2\2\r\u0082\3\2\2\2\17")
        buf.write("\u0089\3\2\2\2\21\u0091\3\2\2\2\23\u0097\3\2\2\2\25\u009c")
        buf.write("\3\2\2\2\27\u00a1\3\2\2\2\31\u00ac\3\2\2\2\33\u00ae\3")
        buf.write("\2\2\2\35\u00b0\3\2\2\2\37\u00b2\3\2\2\2!\u00b4\3\2\2")
        buf.write("\2#\u00b6\3\2\2\2%\u00bd\3\2\2\2\'\u00c3\3\2\2\2)\u00c8")
        buf.write("\3\2\2\2+\u00cd\3\2\2\2-\u00d0\3\2\2\2/\u00d7\3\2\2\2")
        buf.write("\61\u00dd\3\2\2\2\63\u00e3\3\2\2\2\65\u00e5\3\2\2\2\67")
        buf.write("\u00e7\3\2\2\29\u00e9\3\2\2\2;\u00eb\3\2\2\2=\u00ed\3")
        buf.write("\2\2\2?\u00ef\3\2\2\2A\u00f1\3\2\2\2C\u00f3\3\2\2\2E\u00f5")
        buf.write("\3\2\2\2G\u00f7\3\2\2\2I\u00f9\3\2\2\2K\u00fb\3\2\2\2")
        buf.write("M\u00fe\3\2\2\2O\u0101\3\2\2\2Q\u0104\3\2\2\2S\u0106\3")
        buf.write("\2\2\2U\u0109\3\2\2\2W\u010b\3\2\2\2Y\u010f\3\2\2\2[\u0112")
        buf.write("\3\2\2\2]\u0116\3\2\2\2_\u0120\3\2\2\2a\u012b\3\2\2\2")
        buf.write("c\u0130\3\2\2\2e\u0139\3\2\2\2g\u0145\3\2\2\2i\u0147\3")
        buf.write("\2\2\2k\u0149\3\2\2\2mn\7T\2\2no\7G\2\2op\7I\2\2pq\7K")
        buf.write("\2\2qr\7U\2\2rs\7V\2\2st\7G\2\2tu\7T\2\2u\4\3\2\2\2vw")
        buf.write("\7C\2\2wx\7U\2\2x\6\3\2\2\2yz\7=\2\2z\b\3\2\2\2{|\7?\2")
        buf.write("\2|\n\3\2\2\2}~\7N\2\2~\177\7Q\2\2\177\u0080\7C\2\2\u0080")
        buf.write("\u0081\7F\2\2\u0081\f\3\2\2\2\u0082\u0083\7U\2\2\u0083")
        buf.write("\u0084\7E\2\2\u0084\u0085\7J\2\2\u0085\u0086\7G\2\2\u0086")
        buf.write("\u0087\7O\2\2\u0087\u0088\7C\2\2\u0088\16\3\2\2\2\u0089")
        buf.write("\u008a\7X\2\2\u008a\u008b\7G\2\2\u008b\u008c\7T\2\2\u008c")
        buf.write("\u008d\7U\2\2\u008d\u008e\7K\2\2\u008e\u008f\7Q\2\2\u008f")
        buf.write("\u0090\7P\2\2\u0090\20\3\2\2\2\u0091\u0092\7V\2\2\u0092")
        buf.write("\u0093\7C\2\2\u0093\u0094\7D\2\2\u0094\u0095\7N\2\2\u0095")
        buf.write("\u0096\7G\2\2\u0096\22\3\2\2\2\u0097\u0098\7H\2\2\u0098")
        buf.write("\u0099\7T\2\2\u0099\u009a\7Q\2\2\u009a\u009b\7O\2\2\u009b")
        buf.write("\24\3\2\2\2\u009c\u009d\7Y\2\2\u009d\u009e\7K\2\2\u009e")
        buf.write("\u009f\7V\2\2\u009f\u00a0\7J\2\2\u00a0\26\3\2\2\2\u00a1")
        buf.write("\u00a2\7R\2\2\u00a2\u00a3\7T\2\2\u00a3\u00a4\7Q\2\2\u00a4")
        buf.write("\u00a5\7L\2\2\u00a5\u00a6\7G\2\2\u00a6\u00a7\7E\2\2\u00a7")
        buf.write("\u00a8\7V\2\2\u00a8\u00a9\7K\2\2\u00a9\u00aa\7Q\2\2\u00aa")
        buf.write("\u00ab\7P\2\2\u00ab\30\3\2\2\2\u00ac\u00ad\7*\2\2\u00ad")
        buf.write("\32\3\2\2\2\u00ae\u00af\7+\2\2\u00af\34\3\2\2\2\u00b0")
        buf.write("\u00b1\7.\2\2\u00b1\36\3\2\2\2\u00b2\u00b3\7\60\2\2\u00b3")
        buf.write(" \3\2\2\2\u00b4\u00b5\7<\2\2\u00b5\"\3\2\2\2\u00b6\u00b7")
        buf.write("\7G\2\2\u00b7\u00b8\7Z\2\2\u00b8\u00b9\7R\2\2\u00b9\u00ba")
        buf.write("\7C\2\2\u00ba\u00bb\7P\2\2\u00bb\u00bc\7F\2\2\u00bc$\3")
        buf.write("\2\2\2\u00bd\u00be\7U\2\2\u00be\u00bf\7V\2\2\u00bf\u00c0")
        buf.write("\7Q\2\2\u00c0\u00c1\7T\2\2\u00c1\u00c2\7G\2\2\u00c2&\3")
        buf.write("\2\2\2\u00c3\u00c4\7K\2\2\u00c4\u00c5\7P\2\2\u00c5\u00c6")
        buf.write("\7V\2\2\u00c6\u00c7\7Q\2\2\u00c7(\3\2\2\2\u00c8\u00c9")
        buf.write("\7L\2\2\u00c9\u00ca\7Q\2\2\u00ca\u00cb\7K\2\2\u00cb\u00cc")
        buf.write("\7P\2\2\u00cc*\3\2\2\2\u00cd\u00ce\7D\2\2\u00ce\u00cf")
        buf.write("\7[\2\2\u00cf,\3\2\2\2\u00d0\u00d1\7H\2\2\u00d1\u00d2")
        buf.write("\7K\2\2\u00d2\u00d3\7N\2\2\u00d3\u00d4\7V\2\2\u00d4\u00d5")
        buf.write("\7G\2\2\u00d5\u00d6\7T\2\2\u00d6.\3\2\2\2\u00d7\u00d8")
        buf.write("\7Q\2\2\u00d8\u00d9\7T\2\2\u00d9\u00da\7F\2\2\u00da\u00db")
        buf.write("\7G\2\2\u00db\u00dc\7T\2\2\u00dc\60\3\2\2\2\u00dd\u00de")
        buf.write("\7I\2\2\u00de\u00df\7T\2\2\u00df\u00e0\7Q\2\2\u00e0\u00e1")
        buf.write("\7W\2\2\u00e1\u00e2\7R\2\2\u00e2\62\3\2\2\2\u00e3\u00e4")
        buf.write("\7)\2\2\u00e4\64\3\2\2\2\u00e5\u00e6\7&\2\2\u00e6\66\3")
        buf.write("\2\2\2\u00e7\u00e8\7}\2\2\u00e88\3\2\2\2\u00e9\u00ea\7")
        buf.write("\177\2\2\u00ea:\3\2\2\2\u00eb\u00ec\7B\2\2\u00ec<\3\2")
        buf.write("\2\2\u00ed\u00ee\7\'\2\2\u00ee>\3\2\2\2\u00ef\u00f0\7")
        buf.write("A\2\2\u00f0@\3\2\2\2\u00f1\u00f2\7,\2\2\u00f2B\3\2\2\2")
        buf.write("\u00f3\u00f4\7\61\2\2\u00f4D\3\2\2\2\u00f5\u00f6\7-\2")
        buf.write("\2\u00f6F\3\2\2\2\u00f7\u00f8\7/\2\2\u00f8H\3\2\2\2\u00f9")
        buf.write("\u00fa\7`\2\2\u00faJ\3\2\2\2\u00fb\u00fc\7#\2\2\u00fc")
        buf.write("\u00fd\7?\2\2\u00fdL\3\2\2\2\u00fe\u00ff\7?\2\2\u00ff")
        buf.write("\u0100\7?\2\2\u0100N\3\2\2\2\u0101\u0102\7>\2\2\u0102")
        buf.write("\u0103\7?\2\2\u0103P\3\2\2\2\u0104\u0105\7>\2\2\u0105")
        buf.write("R\3\2\2\2\u0106\u0107\7@\2\2\u0107\u0108\7?\2\2\u0108")
        buf.write("T\3\2\2\2\u0109\u010a\7@\2\2\u010aV\3\2\2\2\u010b\u010c")
        buf.write("\7C\2\2\u010c\u010d\7P\2\2\u010d\u010e\7F\2\2\u010eX\3")
        buf.write("\2\2\2\u010f\u0110\7Q\2\2\u0110\u0111\7T\2\2\u0111Z\3")
        buf.write("\2\2\2\u0112\u0113\7b\2\2\u0113\u0114\7b\2\2\u0114\u0115")
        buf.write("\7b\2\2\u0115\\\3\2\2\2\u0116\u011c\5k\66\2\u0117\u011b")
        buf.write("\5k\66\2\u0118\u011b\5i\65\2\u0119\u011b\5g\64\2\u011a")
        buf.write("\u0117\3\2\2\2\u011a\u0118\3\2\2\2\u011a\u0119\3\2\2\2")
        buf.write("\u011b\u011e\3\2\2\2\u011c\u011a\3\2\2\2\u011c\u011d\3")
        buf.write("\2\2\2\u011d^\3\2\2\2\u011e\u011c\3\2\2\2\u011f\u0121")
        buf.write("\5i\65\2\u0120\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122")
        buf.write("\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0124\3\2\2\2")
        buf.write("\u0124\u0126\7\60\2\2\u0125\u0127\5i\65\2\u0126\u0125")
        buf.write("\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0126\3\2\2\2\u0128")
        buf.write("\u0129\3\2\2\2\u0129`\3\2\2\2\u012a\u012c\5i\65\2\u012b")
        buf.write("\u012a\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u012b\3\2\2\2")
        buf.write("\u012d\u012e\3\2\2\2\u012eb\3\2\2\2\u012f\u0131\t\2\2")
        buf.write("\2\u0130\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2\u0134")
        buf.write("\u0135\b\62\2\2\u0135d\3\2\2\2\u0136\u0137\7/\2\2\u0137")
        buf.write("\u013a\7/\2\2\u0138\u013a\7%\2\2\u0139\u0136\3\2\2\2\u0139")
        buf.write("\u0138\3\2\2\2\u013a\u013e\3\2\2\2\u013b\u013d\13\2\2")
        buf.write("\2\u013c\u013b\3\2\2\2\u013d\u0140\3\2\2\2\u013e\u013f")
        buf.write("\3\2\2\2\u013e\u013c\3\2\2\2\u013f\u0141\3\2\2\2\u0140")
        buf.write("\u013e\3\2\2\2\u0141\u0142\7\f\2\2\u0142\u0143\3\2\2\2")
        buf.write("\u0143\u0144\b\63\3\2\u0144f\3\2\2\2\u0145\u0146\7a\2")
        buf.write("\2\u0146h\3\2\2\2\u0147\u0148\t\3\2\2\u0148j\3\2\2\2\u0149")
        buf.write("\u014a\t\4\2\2\u014al\3\2\2\2\13\2\u011a\u011c\u0122\u0128")
        buf.write("\u012d\u0132\u0139\u013e\4\2\3\2\2\4\2")
        return buf.getvalue()


class sdplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    AO_MULTIPLY = 32
    AO_DIVIDE = 33
    AO_PLUS = 34
    AO_MINUS = 35
    AO_POWER = 36
    CO_NE = 37
    CO_EQ = 38
    CO_LE = 39
    CO_LT = 40
    CO_GE = 41
    CO_GT = 42
    AND = 43
    OR = 44
    QUOTE_DELIM = 45
    ID = 46
    DECIMAL = 47
    INTEGER = 48
    WS = 49
    SL_COMMENT = 50

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'REGISTER'", "'AS'", "';'", "'='", "'LOAD'", "'SCHEMA'", "'VERSION'", 
            "'TABLE'", "'FROM'", "'WITH'", "'PROJECTION'", "'('", "')'", 
            "','", "'.'", "':'", "'EXPAND'", "'STORE'", "'INTO'", "'JOIN'", 
            "'BY'", "'FILTER'", "'ORDER'", "'GROUP'", "'''", "'$'", "'{'", 
            "'}'", "'@'", "'%'", "'?'", "'*'", "'/'", "'+'", "'-'", "'^'", 
            "'!='", "'=='", "'<='", "'<'", "'>='", "'>'", "'AND'", "'OR'", 
            "'```'" ]

    symbolicNames = [ "<INVALID>",
            "AO_MULTIPLY", "AO_DIVIDE", "AO_PLUS", "AO_MINUS", "AO_POWER", 
            "CO_NE", "CO_EQ", "CO_LE", "CO_LT", "CO_GE", "CO_GT", "AND", 
            "OR", "QUOTE_DELIM", "ID", "DECIMAL", "INTEGER", "WS", "SL_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "AO_MULTIPLY", 
                  "AO_DIVIDE", "AO_PLUS", "AO_MINUS", "AO_POWER", "CO_NE", 
                  "CO_EQ", "CO_LE", "CO_LT", "CO_GE", "CO_GT", "AND", "OR", 
                  "QUOTE_DELIM", "ID", "DECIMAL", "INTEGER", "WS", "SL_COMMENT", 
                  "UNDERSCORE", "NUMBER", "LETTER" ]

    grammarFileName = "sdpl.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    CHANNEL_WHITESPACE = 1
    CHANNEL_COMMENTS = 2


