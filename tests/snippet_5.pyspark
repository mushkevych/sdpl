# File generated by SDPL compiler from tests/snippet_5.sdpl
# Do not edit the file manually
# # snippet: multi-relational joins
A = sqlContext.read.csv('s3://my_bucket.s3.amazonaws.com:443/path/within/bucket/table_name', schema=StructType([ StructField('a', StringType, False),
    StructField('aa', StringType, False),
    StructField('aaa', StringType, False),
    StructField('column', BooleanType, False),
    StructField('another_column', BooleanType, False),
    StructField('yet_another_column', BooleanType, False) ])
, sep=',')
B = sqlContext.read.csv('s3://my_bucket.s3.amazonaws.com:443/path/within/bucket/file_blob', schema=StructType([ StructField('b', IntegerType, False),
    StructField('bb', IntegerType, False),
    StructField('bbb', IntegerType, False),
    StructField('column', BooleanType, False),
    StructField('another_column', BooleanType, False),
    StructField('yet_another_column', BooleanType, False) ])
, sep=',')
C = A.filter((col(A.a) == 3) & ((col(A.aaa) >= 0) | (col(A.aa) < -100) | ((col(A.a) != 12.12) & (col(A.a) > 789))))
D = B.filter((col(B.b) != 'Bebe') | (col(B.bb) == 'Zeze'))
E = B.filter((col(B.b) != 'table') & (col(B.bb) == 'Bebe') | (col(B.bbb) > -100))
F = B.filter(((col(B.b) != 'Bebe')))
G = B.filter((col(B.bb) != 'Simple'))
H = B.filter((col(B.bbb).like('%match%')))
sqlContext.write.csv('s3://my_bucket.s3.amazonaws.com:443/path/within/bucket/table_name_c', compression='SNAPPY', sep=',')
sqlContext.write.csv('s3://my_bucket.s3.amazonaws.com:443/path/within/bucket/table_name_d', compression='SNAPPY', sep=',')
# SDPL output: EOF
